#pragma once
#include "d3dx12.h"
#include <directXmath.h>
#include <vector>


//==============================================================================================
/// [出来ることリスト]
/// 3次元ベクトルの加算、減算、スカラー乗算、スカラー除算、ベクトルの長さ取得、ベクトルの正規化
/// 前方ベクトル計算、後方ベクトル計算、右方向ベクトルの計算、左方向ベクトルの計算
/// floatの絶対値取得、floatのほぼ一致の判断
//==============================================================================================


//----------------------------------------------------------------------------
/// ベクトルの計算
//----------------------------------------------------------------------------
const DirectX::XMFLOAT3 operator+(const DirectX::XMFLOAT3& vector1, const DirectX::XMFLOAT3& vector2);
const DirectX::XMFLOAT3 operator-(const DirectX::XMFLOAT3& vector1, const DirectX::XMFLOAT3& vector2);
const DirectX::XMFLOAT3 operator*(float scaler, const DirectX::XMFLOAT3& vector);
const DirectX::XMFLOAT3 operator/(float scaler, const DirectX::XMFLOAT3& vector);


namespace Math {

	//---------------------------------------------
	/// [機能] ベクトルの長さの取得
	/// [引数] 3次元ベクトル
	/// [返り値] ベクトルの長さ
	//---------------------------------------------
	float GetLenght(const DirectX::XMFLOAT3& vector);

	//---------------------------------------------
	/// [機能] ベクトルの正規化
	/// [引数] 3次元ベクトル
	/// [返り値] 正規化されたベクトル
	//---------------------------------------------
	DirectX::XMFLOAT3 GetNormalize(const DirectX::XMFLOAT3& vector);


	//---------------------------------------------
	/// [機能] ベクトルの内積の取得
	/// [引数1] 3次元ベクトル1つ目
	/// [引数2] 3次元ベクトル2つ目
	/// [戻り値] ベクトルの内積
	//---------------------------------------------
	constexpr float GetDot(const DirectX::XMFLOAT3& vector1, const DirectX::XMFLOAT3& vector2);

	//----------------------------------------------
	/// [機能] 自身から目標物への角度を求める
	/// [引数1] 自分の位置ベクトル
	/// [引数2] 目標物の位置ベクトル
	/// [戻り値] 目標物のある角度
	//----------------------------------------------
	DirectX::XMFLOAT3 GetAngleToTarget(const DirectX::XMFLOAT3& ownVector, const DirectX::XMFLOAT3& targetVector);


	//---------------------------------------------
	/// [機能] XMVECTOR型をXMFLOAT3型に変換します
	/// [引数] 変換したいベクトルです
	/// [返り値] 変換されたXMFLOAT3です
	//---------------------------------------------
	constexpr DirectX::XMFLOAT3 ConvertVectorToFloat3(const DirectX::XMVECTOR& vector);

	//---------------------------------------------
	/// [機能] 前方ベクトルをクォータニオンで取得します
	/// [引数] クォータニオンです
	/// [返り値] 前方ベクトルです
	//---------------------------------------------
	DirectX::XMFLOAT3 GetFront(const DirectX::XMVECTOR& quaternion);


	//----------------------------------------
	/// [機能] 後方ベクトルを取得します
	/// [引数] クォータニオンです
	/// [返り値] 後方ベクトルです
	//----------------------------------------
	DirectX::XMFLOAT3 GetBack(const DirectX::XMVECTOR& quaternion);

	//----------------------------------------
	/// [機能] 右ベクトルを取得します
	/// [引数] クォータニオンです
	/// [返り値] 右ベクトルです
	//----------------------------------------
	DirectX::XMFLOAT3 GetRight(const DirectX::XMVECTOR& quaternion);

	//----------------------------------------
	/// [機能] 左ベクトルを取得します
	/// [引数] クォータニオンです
	/// [返り値] 左ベクトルです
	//----------------------------------------
	DirectX::XMFLOAT3 GetLeft(const DirectX::XMVECTOR& quaternion);


	//-----------------------------------------------
	/// [機能] 度数法で回転四元数を取得します
	//-----------------------------------------------
	DirectX::XMVECTOR QuaternionRotateEuler(float pitch, float yaw, float roll);
	DirectX::XMVECTOR QuaternionRotateAxis(const DirectX::XMVECTOR& axis, float degreeAngle);


	//-------------------------------------------------------------------
	/// [機能] オイラー角で回転させ、ソースのクォータニオンと乗算します
	/// [引数1,2,3] ロール、ピッチ、ヨー其ぞれの回転量です(度数法) 
	/// [引数4] 算出されたクォータニオンと乗算したいクォータニオンです
	/// [返り値] 乗算結果です
	//--------------------------------------------------------------------
	DirectX::XMVECTOR QuaternionRotateEulerAndMultiply(float pitch, float yaw, float roll, const DirectX::XMVECTOR& srcQuaternion);

	//-----------------------------------------------------------------
	/// [機能] 任意軸で回転させ、ソースのクォータニオンと乗算します
	/// [引数1] 回転軸です
	/// [引数2] 回転量(度数法)
	/// [引数2] 算出されたクォータニオンと乗算したいクォータニオンです
	/// [返り値] 乗算結果です
	//-----------------------------------------------------------------
	DirectX::XMVECTOR QuaternionRotateAxisAndMultiply(const DirectX::XMVECTOR& axis, float degreeAngle, const DirectX::XMVECTOR& srcQuaternion);


	//---------------------------------------------------------------
	/// [機能] 二つの引数がほぼ同じならtrueを返します(foat用)
	/// [引数1] 比べたい数値です
	/// [引数2] 引数1と比べる数値です
	/// [返り値] 引数1と引数2がほぼ同じならtrueを返します
	//---------------------------------------------------------------
	constexpr bool NearEqualF(float num1, float num2);

	//----------------------------------------------------------------
	/// [機能] 桁数を取得する
	/// [引数] 桁数を取得したい数値
	/// [戻り値] 桁数
	//----------------------------------------------------------------
	int NumDigits(int num);

	//----------------------------------------------------------------
	/// [機能] 指定した桁の数値を取得する
	/// [引数1] 抽出元の数値
	/// [引数2] 数値を取得したい桁数
	/// [戻り値] 指定された桁の数値
	//----------------------------------------------------------------
	int GetNumOfDigit(int num, int digit);
 
}
